name: $(TeamProject)_$(Build.DefinitionName)_$(SourceBranchName)_$(Date:yyyyMMdd)$(Rev:.r)

parameters:
  - name: nuGetDeploy
    displayName: Deploy to NuGet
    type: boolean
    default: false

variables:
  dotnetVersion: 8.x
  dotnetIncludePreviewVersions: false
  solution: Umbraco.Sample.Headless.Blog.sln
  buildConfiguration: Release
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true

stages:
  ###############################################
  ## Build
  ###############################################
  - stage: Build
    variables:
      npm_config_cache: $(Pipeline.Workspace)/.npm_client
    jobs:
      - job:
        displayName: Build Solution
        pool:
          vmImage: 'ubuntu-latest'
        steps:
          # Checkout source (avoid shallow clone to calculate version height)
          - checkout: self
            fetchDepth: 0
          - task: UseDotNet@2
            displayName: Use .NET $(dotnetVersion)
            inputs:
              version: $(dotnetVersion)
              performMultiLevelLookup: true
              includePreviewVersions: $(dotnetIncludePreviewVersions)
          - task: DotNetCoreCLI@2
            displayName: Run dotnet restore
            inputs:
              command: restore
              projects: $(solution)
          - task: DotNetCoreCLI@2
            displayName: Run dotnet build
            inputs:
              command: build
              projects: $(solution)
              arguments: '--configuration $(buildConfiguration) --no-restore -p:ContinuousIntegrationBuild=true'
          - script: |
              version="$(Build.BuildNumber)"
              echo "Version: $version"

              major="$(echo $version | cut -d '.' -f 1)"
              echo "Major version: $major"

              echo "##vso[task.setvariable variable=majorVersion;isOutput=true]$major"
            displayName: Set major version
            name: determineMajorVersion
          - script: dotnet pack $(solution) --configuration $(buildConfiguration) --no-build --property:PackageOutputPath=$(Build.ArtifactStagingDirectory)/nupkg
            displayName: Run dotnet pack
          - script: |
              sha="$(Build.SourceVersion)"
              sha=${sha:0:7}
              buildnumber="$(Build.BuildNumber)_$(Build.BuildId)_$sha"
              echo "##vso[build.updatebuildnumber]$buildnumber"
            displayName: Update build number
          - task: PublishPipelineArtifact@1
            displayName: Publish nupkg
            inputs:
              targetPath: $(Build.ArtifactStagingDirectory)/nupkg
              artifactName: nupkg
          - task: PublishPipelineArtifact@1
            displayName: Publish build artifacts
            inputs:
              targetPath: $(Build.SourcesDirectory)
              artifactName: build_output

  ###############################################
  ## Release
  ###############################################
  - stage: Deploy_NuGet
    displayName: NuGet release
    condition: and(succeeded(), or(startsWith(variables['Build.SourceBranch'], 'refs/heads/release/'), ${{parameters.nuGetDeploy}}))
    jobs:
      - job:
        displayName: Push to NuGet
        steps:
          - checkout: none
          - task: DownloadPipelineArtifact@2
            displayName: Download nupkg
            inputs:
              artifact: nupkg
              path: $(Build.ArtifactStagingDirectory)/nupkg
          - task: NuGetCommand@2
            displayName: NuGet push
            inputs:
              command: 'push'
              packagesToPush: $(Build.ArtifactStagingDirectory)/**/*.nupkg
              nuGetFeedType: 'external'
              publishFeedCredentials: 'NuGet - Umbraco.Sample.*'
